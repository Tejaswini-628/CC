exp-1:
def reversort(l):
    cost = 0
    for i in range(len(l)-1):
        j = l.index(min(l[i:]),i)
        l[i:j+1] = reversed(l[i:j+1])
        cost += j-i+1
    return cost
for i in range(int(input())):
    n = int(input())
    l = list(map(int,input().split()))
    print(reversort(l))

---------

exp - 2:
def engineer_reversort(n,c):
    min_cost=n-1
    max_cost=(n*(n+1))//2-1
    if c<min_cost or c>max_cost:
        return "Impossible"
    li=list(range(1,n+1))
    rem=c-min_cost
    for i in range(n-2,-1,-1):
        maxi=n-i
        reversal=min(rem+1,maxi)
        li[i:i+reversal]=reversed(li[i:i+reversal])
        rem=(reversal-1)
    return " ".join(map(str,li))
t=int(input())
for a in range(1,t+1):
    n,c=map(int,input().split())
    res=engineer_reversort(n,c)
    print(f"Case #{a}:{res}")

----------

exp - 3:
def compute_sum_range(start, end):
    return (end - start + 1) * (start + end) // 2
def solve_case(A1, A2, B1, B2):
    sum_a = compute_sum_range(A1, A2)
    sum_b = compute_sum_range(B1, B2)
    total_sum = sum_a * (B2 - B1 + 1) + sum_b * (A2 - A1 + 1)
    return total_sum
t=int(input())
for a in range(1,t+1):
    a1,a2,b1,b2=map(int,input().split())
    res=solve_case(a1,a2,b1,b2)
    print(f"Case #{a}: {res}")

-------------

exp - 4:
def destroy(arr,order,n):
    for i in range(0,n):
        arr[order[i]-1] = -1
        max_sum = 0
        sum_ = 0
        for j in range(0,n):
            if(arr[j] == -1):
                sum_ = 0
                continue
            sum_ += arr[j]
            max_sum = max(sum_,max_sum)
        print(max_sum)

n = int(input())
arr = list(map(int,input().split()))
order = list(map(int,input().split()))
destroy(arr,order,n)

------------



exp - 5:
n=int(input())
li=list(map(str,input().split()))
count=1
for i in range(1,n):
    if li[i]!=li[i-1]:
        count+=1
print(count)


-------------

exp - 6:
from collections import deque,defaultdict
def topological_sort(n,adj_list,in_degree):
    queue=deque([i for i in range(1,n+1) if in_degree[i]==0])
    count=0
    while queue:
        node=queue.popleft()
        count+=1
        for i in adj_list[node]:
            in_degree[i]-=1
            if in_degree[i]==0:
                queue.append(i)
    return count==n
def cycle(n,edges):
    adj_list=defaultdict(list)
    in_degree=[0]*(n+1)
    for u,v in edges:
        adj_list[u].append(v)
        in_degree[v]+=1
    if topological_sort(n,adj_list,in_degree.copy()):
        return "YES"
    for u,v in edges:
        adj_list[u].remove(v)
        in_degree[v]-=1
    if topological_sort(n,adj_list,in_degree.copy()):
        return "YES"
    adj_list[u].append(v)
    in_degree[v]+=1
    return "NO"
n,m=map(int,input().split())
e=[tuple(map(int,input().split())) for _ in range(m)]
print(cycle(n,e))

--------------


exp - 7:
def find_gift_givers(n, p):
    givers = [0] * n
    for i in range(n):
        givers[p[i] - 1] = i + 1
    return givers
n = int(input())
p = list(map(int, input().split()))
result = find_gift_givers(n, p)
print(" ".join(map(str, result)))

--------------
exp - 8:
t = int(input())
results = []
for _ in range(t):
    a, b = map(int, input().split())
    if( a>=-1000 and a<=1000 and b>=-1000 and b<=1000 ):
        results.append(str(a + b))
print(" ".join(results))


------------------
exp - 9:
def count_untreated_crimes(n, events):
    officers = 0
    untreated_crimes = 0
    for event in events:
        if event == -1:
            if officers > 0:
                officers -= 1
            else:
                untreated_crimes += 1
        else:
            officers += event
    return untreated_crimes
n = int(input())
events = list(map(int, input().split()))
print(count_untreated_crimes(n, events))

--------------

exp - 10:
n = int(input())
print(n // 2 + 1)